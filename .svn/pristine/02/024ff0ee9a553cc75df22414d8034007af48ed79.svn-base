package com.howbuy.jso.service.network;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;

public class MyNioServer
{
    private int BUFFERSIZE = 1024 * 10;
    
    private Selector sel;

    public MyNioServer(int port) throws IOException
    {
        ServerSocketChannel ssc = ServerSocketChannel.open();
        ssc.configureBlocking(false);
        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), port));
        sel = Selector.open();
        ssc.register(sel, SelectionKey.OP_ACCEPT);
    }

    public void startup()
    {
        System.out.println("Server start...");
        try
        {
            while (!Thread.interrupted())
            {
                int keysCount = sel.select();
                if (keysCount < 1)
                {
                    continue;
                }
                Set<SelectionKey> set = sel.selectedKeys();
                Iterator<SelectionKey> it = set.iterator();
                while (it.hasNext())
                {
                    SelectionKey key = it.next();
                    if (key.isAcceptable())
                    {
                        doAccept(key);
                    }
                    if (key.isValid() && key.isReadable())
                    {
                        doRead(key);
                    }
                    if (key.isValid() && key.isWritable())
                    {
                        doWrite(key);
                    }
                }
                set.clear();
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        
        System.out.println("Server stop...");
        shutdown();
    }

    public void shutdown()
    {
        Set<SelectionKey> keys = sel.keys();
        for (SelectionKey key : keys)
        {
            try
            {
                key.channel().close();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
        try
        {
            sel.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private void doAccept(SelectionKey key)
    {
        try
        {
            SocketChannel sc = ((ServerSocketChannel)key.channel()).accept();
            sc.configureBlocking(false);
            SelectionKey newkey = sc.register(sel, SelectionKey.OP_READ);
            newkey.attach(new LinkedList<ByteBuffer>());
            new Thread(new UserInteractive(newkey)).start();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    //TODO buffersize performance testing
    private void doRead(SelectionKey key)
    {
        try
        {
            SocketChannel sc = (SocketChannel) key.channel();
            ByteBuffer buffer = ByteBuffer.allocate(BUFFERSIZE);
            int count = 0;
            while ((count = sc.read(buffer)) > 0);
            
            buffer.flip();
            byte[] data = new byte[buffer.limit()];
            buffer.get(data, 0, buffer.limit());
            
            //if client disconnected, read return -1
            if (count == -1)
            {
                System.out.println("client disconnected");
                disconnect(key);
            }
            else
            {
                StringBuilder builder = new StringBuilder();
                builder.delete(0, builder.length());
                builder.append("[");
                for (int i = 0; i < data.length; i++)
                {
                    builder.append(data[i]).append(" ");
                }
                builder.append("]");
                
                System.out.println("[client]:"+ builder.toString());
            }
        }
        catch (IOException e)
        {
            disconnect(key);
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    private void doWrite(SelectionKey key)
    {
        SocketChannel sc = (SocketChannel) key.channel();
        LinkedList<ByteBuffer> outseq = (LinkedList<ByteBuffer>)key.attachment();
        ByteBuffer bb = outseq.poll();
        if (bb == null)
        {
            return;
        }
        try
        {
            while (bb.hasRemaining())
            {
                sc.write(bb);
            }
        }
        catch (IOException e)
        {
            disconnect(key);
            e.printStackTrace();
        }
        
        if (outseq.size() == 0)
        {
            System.out.println("after all buffers wrote, unregister OP_WRITE from interestOps");
            key.interestOps(SelectionKey.OP_READ);
        }
    }

    private void disconnect(SelectionKey key)
    {
        try
        {
            key.channel().close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private class UserInteractive implements Runnable
    {

        SelectionKey key;

        public UserInteractive(SelectionKey key)
        {
            this.key = key;
        }

        @SuppressWarnings("unchecked")
        public void run()
        {
            System.out.println("UserInteractive thread start...");
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            while (true)
            {
                try
                {
                    String inputLine = br.readLine();
                    ByteBuffer bb = ByteBuffer.allocate(1024);
                    bb = ByteBuffer.wrap(inputLine.getBytes());
                    ((LinkedList<ByteBuffer>)key.attachment()).offer(bb);
                    
                    key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);
                    key.selector().wakeup();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }
    }
    
    /**
     * @param args
     */
    public static void main(String[] args)
    {
        try
        {
            MyNioServer server = new MyNioServer(10001);
            server.startup();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            System.err.println("Exception caught, program exitingâ€¦");
        }
    }
}

